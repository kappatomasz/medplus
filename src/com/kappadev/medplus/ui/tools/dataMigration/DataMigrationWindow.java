/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.kappadev.medplus.ui.tools.dataMigration;

import java.awt.Dialog;
import java.awt.GridLayout;
import java.io.File;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import com.kappadev.medplus.data.DiskDrive.DiskDrive;
import com.kappadev.medplus.data.migration.DataMigrationConstants;
import com.kappadev.medplus.utils.FileUtils;

/**
 *
 * @author chlast
 */
public class DataMigrationWindow extends javax.swing.JDialog {
    
    
    private List<DiskDrive> availableDiskDrives;
    private DiskDrive selectedDiskDrive;
    private File selectedFile;
    private String operatingSystem;
    
    /**@param dataMigrationType
     * Creates new form DataImportWindow
     */
    public DataMigrationWindow(String dataMigrationType) {
        setModalityType(Dialog.ModalityType.DOCUMENT_MODAL);
        initComponents();
            headerInfo.setLayout(new GridLayout());
            selectDirBtn.setEnabled(false);
        switch (dataMigrationType) {
            case DataMigrationConstants.DATA_MIGRATION_IMPORT:
                headerInfo.setText(DataMigrationConstants.DATA_MIGRATION_HEADER_TEXT_IMPORT);
                dataMigrationTypeLabel.setText(DataMigrationConstants.DATA_MIGRATION_IMPORT_LABEL);
                break;
            case DataMigrationConstants.DATA_MIGRATION_EXPORT:    
                headerInfo.setText(DataMigrationConstants.DATA_MIGRATION_HEADER_TEXT_EXPORT);
                dataMigrationTypeLabel.setText(DataMigrationConstants.DATA_MIGRATION_EXPORT_LABEL);
                break;
        }
        operatingSystem = FileUtils.getOperatingSystemName();
        switch (FileUtils.getOperatingSystemName()) {
            case DataMigrationConstants.DATA_MIGRATION_WINDOWS:
                availableDiskDrives = FileUtils.getDisksWindows();
                break;
            case DataMigrationConstants.DATA_MIGRATION_UNIX:
                availableDiskDrives = FileUtils.getExternalDisksUnix();
                break;
            case DataMigrationConstants.DATA_MIGRATION_APPLE:
                availableDiskDrives = FileUtils.getExternalDisksMac();
                break;
        }
        
        DefaultComboBoxModel<DiskDrive> diskDriveComboBoxModel = new DefaultComboBoxModel<>();
        for(DiskDrive dd : availableDiskDrives){
            diskDriveComboBoxModel.addElement(dd);
        }
        diskDriveComboBox.setModel(diskDriveComboBoxModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dataMigrationTypeLabel = new javax.swing.JLabel();
        diskDriveComboBox = new javax.swing.JComboBox();
        headerInfo = new javax.swing.JLabel();
        advancedModeChkBox = new javax.swing.JCheckBox();
        selectDirBtn = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        acceptBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        dataMigrationTypeLabel.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        dataMigrationTypeLabel.setText("Importuj dane z: ");

        diskDriveComboBox.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N
        diskDriveComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        headerInfo.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        headerInfo.setText("Wybierz dysk/pendrive, z którego mają być zaimportowane");

        advancedModeChkBox.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N
        advancedModeChkBox.setText("Zaawansowany wybór dysku/folderu");
        advancedModeChkBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                advancedModeChkBoxActionPerformed(evt);
            }
        });

        selectDirBtn.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N
        selectDirBtn.setText("Wybierz");
        selectDirBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectDirBtnActionPerformed(evt);
            }
        });

        cancel.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N
        cancel.setText("Anuluj");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        acceptBtn.setFont(new java.awt.Font("DejaVu Sans", 0, 14)); // NOI18N
        acceptBtn.setText("Zatwierdź");
        acceptBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(dataMigrationTypeLabel)
                        .addGap(18, 18, 18)
                        .addComponent(diskDriveComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(headerInfo)
                            .addComponent(advancedModeChkBox)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(acceptBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(selectDirBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE))
                                .addGap(212, 212, 212)
                                .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(headerInfo)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dataMigrationTypeLabel)
                    .addComponent(diskDriveComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(advancedModeChkBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectDirBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(acceptBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
        );

        acceptBtn.getAccessibleContext().setAccessibleName("acceptBtn");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void advancedModeChkBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_advancedModeChkBoxActionPerformed
        if(advancedModeChkBox.isSelected()){
            selectDirBtn.setEnabled(true);
        }
    }//GEN-LAST:event_advancedModeChkBoxActionPerformed

    private void selectDirBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectDirBtnActionPerformed
        JFileChooser jFileChooser = new JFileChooser();
        jFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        jFileChooser.setCurrentDirectory(new File(System.getProperty(DataMigrationConstants.USER_HOME_DIR)));
        int result = jFileChooser.showOpenDialog(this);
        if(result == JFileChooser.APPROVE_OPTION){
            selectedFile = jFileChooser.getSelectedFile();
        }
    }//GEN-LAST:event_selectDirBtnActionPerformed

    private void acceptBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptBtnActionPerformed
       this.dispose();
    }//GEN-LAST:event_acceptBtnActionPerformed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
       this.dispose();
    }//GEN-LAST:event_cancelActionPerformed

    public DiskDrive getSelectedDiskDrive(){
        DiskDrive dd = new DiskDrive();
            if(advancedModeChkBox.isSelected()){
                if(selectedFile!=null){
                    dd.setPath(selectedFile);
                    dd.setReadable(selectedFile.canRead());
                    dd.setWriteable(selectedFile.canWrite());
                    dd.setDriveName("");
                }
            }else{
                if(diskDriveComboBox.getItemCount()>0){
                    dd = (DiskDrive)diskDriveComboBox.getSelectedItem(); 
                }
            }
            return dd;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptBtn;
    private javax.swing.JCheckBox advancedModeChkBox;
    private javax.swing.JButton cancel;
    private javax.swing.JLabel dataMigrationTypeLabel;
    private javax.swing.JComboBox diskDriveComboBox;
    private javax.swing.JLabel headerInfo;
    private javax.swing.JButton selectDirBtn;
    // End of variables declaration//GEN-END:variables
}
